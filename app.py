from flask import Flask, request, render_template, redirect, url_for, Response
from twilio.twiml.messaging_response import MessagingResponse
from flask_httpauth import HTTPBasicAuth
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import datetime
import re

app = Flask(__name__)
auth = HTTPBasicAuth()

# Utilisateur admin
users = {
    "admin": generate_password_hash("askely2025")
}

@auth.verify_password
def verify_password(username, password):
    if username in users and check_password_hash(users.get(username), password):
        return username

# Page d'accueil
@app.route('/')
def index():
    return "üöÄ Askely Express est en ligne."

# Webhook WhatsApp
@app.route("/webhook/whatsapp", methods=["POST"])
def whatsapp_webhook():
    incoming_msg = request.form.get('Body', '').lower()
    from_number = request.form.get('From')

    print(f"üì© Message WhatsApp re√ßu de {from_number}: {incoming_msg}")

    resp = MessagingResponse()
    msg = resp.message()

    if "bonjour" in incoming_msg:
        msg.body("üëã Bonjour ! Bienvenue chez Askely Express. R√©pondez par :\n1. Envoyer un colis\n2. Devenir transporteur\n3. Suivre un colis")\n1. Envoyer un colis\n2. Devenir transporteur\n3. Suivre un colis"))
1. Envoyer un colis
2. Devenir transporteur
3. Suivre un colis")
    elif "1" in incoming_msg or "envoyer" in incoming_msg:
        msg.body("[COLIS] Tr√®s bien ! Veuillez r√©pondre en une seule ligne au format suivant :
Ville d√©part - Ville arriv√©e - Poids(kg) - T√©l√©phone

Exemple : Casa - Dakar - 5 - +212600000000")
    elif re.match(r"^[a-zA-Z√©√®√†√ß√π\s]+ - [a-zA-Z√©√®√†√ß√π\s]+ - \d+ - \+?\d+$", incoming_msg.strip()):
        try:
            parts = incoming_msg.strip().split(" - ")
            depart = parts[0].strip().capitalize()
            arrivee = parts[1].strip().capitalize()
            poids = float(parts[2].strip())
            tel = parts[3].strip()
            montant = round(poids * 10, 2)  # ex: 10 MAD/kg

            conn = sqlite3.connect('paiements.db')
            c = conn.cursor()
            c.execute("INSERT INTO paiements (nom_client, tel_client, ville_depart, ville_arrivee, poids_kg, prix_total, date) VALUES (?, ?, ?, ?, ?, ?, ?)", 
                      ("Client WhatsApp", tel, depart, arrivee, poids, montant, datetime.datetime.now()))
            conn.commit()
            conn.close()

            msg.body(f"[OK] Colis enregistr√© !
[TRANSPORTEUR] {depart} ‚Üí {arrivee}
Colis : {poids} kg
T√©l√©phone : {tel}
Prix : {montant} MAD √† payer")
        except:
            msg.body("[ERREUR] Format invalide. R√©essayez comme :
Casa - Dakar - 5 - +212600000000")
    elif "2" in incoming_msg or "transporteur" in incoming_msg:
        msg.body("[TRANSPORTEUR] Pour devenir transporteur, envoyez :
- Vos destinations
- Num√©ro WhatsApp
- Une pi√®ce d'identit√©")
    elif "3" in incoming_msg or "suivre" in incoming_msg:
        msg.body("[SUIVI] Entrez le num√©ro de suivi du colis (si vous en avez un).")
    else:
        msg.body("[BOT] Je n'ai pas compris. R√©pondez par 'Bonjour' pour afficher le menu.")

    return str(resp)

# Dashboard admin
@app.route('/admin/paiements')
@auth.login_required
def voir_paiements():
    conn = sqlite3.connect('paiements.db')
    c = conn.cursor()
    c.execute("SELECT * FROM paiements ORDER BY date DESC")
    paiements = c.fetchall()
    conn.close()
    return render_template('paiements.html', paiements=paiements)

# Cr√©ation automatique de la base de donn√©es
def init_db():
    conn = sqlite3.connect('paiements.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS paiements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nom_client TEXT,
            tel_client TEXT,
            ville_depart TEXT,
            ville_arrivee TEXT,
            poids_kg REAL,
            prix_total REAL,
            date TEXT
        )
    """)
    conn.commit()
    conn.close()

if __name__ == '__main__':
    init_db()
    app.run(host='0.0.0.0', port=10000, debug=True)
